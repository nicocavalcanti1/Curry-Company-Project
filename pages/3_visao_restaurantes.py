#=====================================
#=     Importando bibliotecas 
#=====================================

import streamlit as st
import pandas as pd
import numpy as np 
import plotly.express as px
import plotly.graph_objects as go
from haversine import haversine
import datetime
from PIL import Image
import folium
from streamlit_folium import folium_static

st.set_page_config(page_title='Vis√£o Restaurantes', page_icon='üçõ', layout='wide')

#=====================================
# Configura√ß√£o global de visualiza√ß√£o
#=====================================

pd.set_option("display.max_columns", 21)

#================================================================================
#==========        Fun√ß√µes
#================================================================================

def avg_std_time_on_traffic(df1):
                
    df_aux = (df1.loc[:, ['Time_taken(min)', 'City', 'Road_traffic_density']]
                .groupby(['City', 'Road_traffic_density'])
                .aggregate(['mean', 'std']))
    df_aux.columns = ['avg_time', 'std_time']
    df_aux = df_aux.reset_index()
    
    # Plotando gr√°fico de barras
    fig = go.Figure()
    fig=px.sunburst(df_aux, path=['City', 'Road_traffic_density'], values='avg_time',
                            color='std_time', color_continuous_scale='RdBu',
                            color_continuous_midpoint=np.average(df_aux['std_time']))
    
    return fig 

def avg_std_time_graph(df1):
    df_aux = (df1.loc[:, ['Time_taken(min)', 'City']]
                .groupby(['City'])
                .aggregate(['mean', 'std']))
    df_aux.columns = ['avg_time', 'std_time']
    df_aux = df_aux.reset_index()
        
    # Plotando gr√°fico de barras
    fig = go.Figure()
    fig.add_trace(go.Bar(name='Control',
                        x=df_aux['City'],
                        y=df_aux['avg_time'],
                        error_y=dict(type='data',array=df_aux['std_time'])))
    fig.update_layout(barmode='group')
    
    return fig

def avg_std_time_delivery(df1, Festival, op):
    '''
        Esta fun√ß√£o calcula o tempo m√©dio e o desvio padr√£o do tempo de entrega.
        Par√™mtros:
            Input:
                -df: Dataframe com os dados necess√°rios para o c√°lculo
                -op: Tipo de opera√ß√£o que precisa ser calculado
                    'avg_time': Calcula o tempo m√©dio
                    'std_time': Calcula o desvio padr√£o do tempo
            Output:
                -df: Dataframe com 2 colunas e 1 linha.                    
    '''
    df_aux = df1.loc[:, ['Time_taken(min)', 'Festival']].groupby(['Festival']).aggregate(['mean', 'std'])
    df_aux.columns = ['avg_time', 'std_time']
    df_aux = df_aux.reset_index()
    linhas_selecionadas = df_aux['Festival'] == Festival
    df_aux = np.round(df_aux.loc[linhas_selecionadas,op],2)
    
    return df_aux

def distance(df1, fig):
    if fig ==False:
        cols = ['Delivery_location_latitude', 'Delivery_location_longitude', 'Restaurant_latitude', 'Restaurant_longitude']
        df1['distance'] = (df1.loc[:, cols]
                            .apply(lambda x: haversine( (x['Restaurant_latitude'], x['Restaurant_longitude']), (x['Delivery_location_latitude'], x['Delivery_location_longitude'])), axis=1))
        
        avg_distance = np.round(df1['distance'].mean(),2)
        return avg_distance
    else:
        cols = ['Delivery_location_latitude', 'Delivery_location_longitude', 'Restaurant_latitude', 'Restaurant_longitude']
        df1['distance'] = (df1.loc[:, cols].apply(lambda x: haversine( (x['Restaurant_latitude'], x['Restaurant_longitude']), (x['Delivery_location_latitude'], x['Delivery_location_longitude'])), axis=1))
        avg_distance = df1.loc[:, ['City', 'distance']].groupby('City').mean().reset_index()
        # gr√°fico de pizza
        fig = go.Figure(data=[go.Pie(labels=avg_distance['City'], values=avg_distance['distance'], pull=[0,0.1,0])])
        return fig   
    

def clean_code(df1):
    
    ''' 
        Esta fun√ß√£o tem a responsabilidade de limpar o dataframe

        Tipos de Limpeza:
        1. Remo√ß√£o dos dados NaN
        2. Mudan√ßa do tipo da coluna de dados
        3. Remo√ß√£o dos espa√ßos das vari√°veis de texto
        4. Formata√ß√£o da coluna de data
        5. Limpeza da coluna de tempo (Remo√ß√£o do texto da vari√°vel num√©rica)
        
        Input: Dataframe
        Output: Dataframe
    '''
    
    linhas_selecionadas = df['Delivery_person_Age'] != 'NaN '
    df1 = df1.loc[linhas_selecionadas, :] 

    linhas_selecionadas = df['Road_traffic_density'] != 'NaN '
    df1 = df1.loc[linhas_selecionadas, :] 

    linhas_selecionadas = df1['multiple_deliveries'] != 'NaN '
    df1 = df1.loc[linhas_selecionadas, :]

    linhas_selecionadas = df1['City'] != 'NaN '
    df1 = df1.loc[linhas_selecionadas, :]

    linhas_selecionadas = df1['Festival'] != 'NaN '
    df1 = df1.loc[linhas_selecionadas, :]

    df1['Delivery_person_Age'] = df1['Delivery_person_Age'].astype(int)

    df1['Delivery_person_Ratings'] = df1['Delivery_person_Ratings'].astype(float) 

    df1['Order_Date'] = pd.to_datetime(df1['Order_Date'], format='%d-%m-%Y')

    df1['multiple_deliveries'] = df1['multiple_deliveries'].astype(int)

    df1['Time_taken(min)'] = df1['Time_taken(min)'].str.slice(6)

    df1['Time_taken(min)'] = df1['Time_taken(min)'].astype(int)

    # Removendo espa√ßos do campo

    df1 = df1.reset_index(drop=True)

    df1['ID'] = df1.loc[:, 'ID'].str.strip()
    df1['Delivery_person_ID'] = df1['Delivery_person_ID'].str.strip()
    df1['Type_of_order'] = df1['Type_of_order'].str.strip()
    df1['Type_of_vehicle'] = df1['Type_of_vehicle'].str.strip()
    df1['Type_of_vehicle'] = df1['Type_of_vehicle'].str.strip()
    df1['Road_traffic_density'] = df1['Road_traffic_density'].str.strip()
    df1['Festival'] = df1['Festival'].str.strip()
    
    return df1


# ------------------------------------ In√≠cio da estrutura l√≥gica do c√≥digo ---------------------------------------------------


#================================================================================
#==========        Importando dataset
#================================================================================

df = pd.read_csv('dataset/train.csv')


#================================================================================
#==========        Limpando os dados
#================================================================================

df1 = clean_code(df)


#=======================================
# Barra Lateral
#=======================================

st.header('Marketplace - Vis√£o Restaurantes')

#image_path = '/home/nicolas/Documentos/repos/03_FTC/Modulo_06/03_Imagens/target3.jpeg'
image = Image.open('target3.jpeg')
st.sidebar.image(image, width=120)

st.sidebar.markdown('# Curry Company')
st.sidebar.markdown('## Fastest Delivery in Town')
st.sidebar.markdown("""___""")

#=====================================
# Filtro de data
#=====================================

st.sidebar.markdown('## Selecione uma data limite')

date_slider= st.sidebar.slider(
    'At√© qual valor?',
    value=datetime.datetime(2022,4,6),
    min_value=datetime.datetime(2022,2,11),
    max_value=datetime.datetime(2022,4,6),
    format='DD-MM-YYYY')

st.sidebar.markdown("""___""")

#=====================================
# Filtro de tr√°fego
#=====================================

traffic_options = st.sidebar.multiselect(
    'Quais as condi√ß√µes do transito',
    ['Low', 'Medium', 'High', 'Jam'],
    default='Low')
st.sidebar.markdown("""___""")

#=====================================
# Filtro de clima
#=====================================

Weatherconditions_options = st.sidebar.multiselect(
    'Quais as condi√ß√µes clim√°ticas',
    ['conditions Cloudy', 'conditions Fog', 'conditions Sunny', 'conditions Stormy', 'conditions Sandstorms', 'conditions Windy'],
    default='conditions Cloudy')
st.sidebar.markdown("""___""")

st.sidebar.markdown('### Powered by Comunidade DS')

#=====================================
# Filtro de data
#=====================================

linhas_selecionadas = df1['Order_Date'] <= date_slider
df1 = df1.loc[linhas_selecionadas, :]

#=====================================
# Filtro de transito
#=====================================

linhas_selecionadas = df1['Road_traffic_density'].isin(traffic_options)
df1 = df1.loc[linhas_selecionadas, :]

#=====================================
# Filtro de Clima
#=====================================

linhas_selecionadas = df1['Weatherconditions'].isin(Weatherconditions_options)
df1 = df1.loc[linhas_selecionadas, :]


#=====================================
#==== Layout Restaurantes
#=====================================

tab1, tab2, tab3 = st.tabs(['Vis√£o Gerencial', '_', '_'])

with tab1:
    with st.container():
        st.markdown('##### Overall Metrics')
        col1, col2, col3, col4, col5, col6 = st.columns(6)
        
        with col1:
            delivery_unique = len((df1['Delivery_person_ID'].unique()))
            col1.metric('Entregadores', delivery_unique)
        
        with col2:
            avg_distance = distance(df1, False)
            col2.metric('Dist√¢ncia m√©dia', avg_distance)         
            
            
        with col3:
                        
            df_aux = avg_std_time_delivery(df1, 'Yes', 'avg_time')    
            col3.metric('Tempo m√©dio', df_aux)
            
        with col4:
            
            df_aux = avg_std_time_delivery(df1, 'Yes', 'std_time')    
            col4.metric('STD Entrega', df_aux)
            
        with col5:
            
            df_aux = avg_std_time_delivery(df1, 'No', 'avg_time')    
            col5.metric('Tempo m√©dio', df_aux)
            
        with col6:
            df_aux = avg_std_time_delivery(df1, 'No', 'std_time')    
            col6.metric('STD Entrega', df_aux)
    
    with st.container():
        st.markdown("""___""")
        st.markdown('##### Tempo m√©dio de entrega por cidade')
        fig = avg_std_time_graph(df1)
        st.plotly_chart(fig)
        
    
    with st.container():
        st.markdown("""___""")
        st.markdown('##### Distribui√ß√£o do tempo')
        
        col1, col2 = st.columns(2)
        with col1:
            
            fig = distance(df1, True)
            st.plotly_chart(fig)
            
        
        with col2:
            
            fig = avg_std_time_on_traffic(df1)
            st.plotly_chart(fig)
            
        
    with st.container():
        st.markdown("""___""")
        st.markdown('##### Distribui√ß√£o da dist√¢ncia')
        df_aux = df1.loc[:, ['Type_of_order', 'Time_taken(min)', 'City']].groupby(['City', 'Type_of_order']).aggregate(['mean', 'std'])
        df_aux.columns = ['avg_order', 'std_order']
        df_aux = df_aux.reset_index()
        st.dataframe(df_aux)
        
        st.markdown("""___""")